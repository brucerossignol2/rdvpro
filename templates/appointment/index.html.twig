{# templates/appointment/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Mon Calendrier - RDV Pro{% endblock %}

{% block stylesheets %}
    {{ parent() }} {# Important to keep parent stylesheets if any #}
    {# FullCalendar CSS #}
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/main.min.css" rel="stylesheet">
    <style>
        /* Basic FullCalendar styles */
        #calendar {
            min-height: 500px; /* Ensure the calendar container has a minimum height */
        }
        .fc-event {
            cursor: pointer;
        }
        .fc-event-title-wrap {
            white-space: normal; /* Allow event titles to wrap */
        }
        .fc-daygrid-event {
            margin-top: 2px;
            margin-bottom: 2px;
        }
        .fc-timegrid-event {
            padding: 5px;
        }
        .fc-toolbar-title {
            font-size: 1.5rem; /* Adjust title size */
        }
        .fc-button {
            padding: 0.5em 0.8em;
            font-size: 0.9em;
        }
        .fc-daygrid-day-number {
            font-weight: bold;
        }
        .fc-day-today {
            background-color: #e6f2ff !important; /* Light blue for today */
        }
        /* Style pour les heures non ouvrables (businessHours) */
        .fc-non-business {
            background-color: #d0d0d0 !important; /* Couleur de fond grisée plus foncée - FORCÉE */
            opacity: 0.7 !important; /* Légèrement transparent - FORCÉ */
        }

        /* NEW: Style for calendar column headers (days of the week) */
        .fc-col-header-cell-cushion { /* This class targets the text inside the header cells */
            color: #3F8574 !important; /* Apply the desired color, adjust as needed */
            font-weight: bold; /* Make them bold for better visibility if desired */
        }
        /* Optional: If you want to change the border/background of the header row itself */
        .fc-theme-standard th {
            border-color: #3F8574; /* Change border color of header cells */
        }

        /* Styles pour la Responsivité */
        @media (max-width: 690px) {
            /* Masque les boutons de vue (mois, semaine, jour) sur les petits écrans */
            .fc-toolbar-chunk:last-child {
                display: none;
            }
            /* Ajuste la taille du titre si nécessaire pour les petits écrans */
            .fc-toolbar-title {
                font-size: 1.2rem;
            }
            /* Cache la colonne horaire sur timeGridDay si nécessaire pour gagner de l'espace */
            /* .fc-timegrid-axis-frame { display: none; } */
        }
    </style>
{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row">
        {# La colonne latérale (sidebar) a été supprimée #}

        {# La classe col-md-9 ms-sm-auto col-lg-10 px-md-4 est remplacée par col-12 pour prendre toute la largeur #}
        <main class="col-12 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">
                    <i class="fas fa-calendar-alt text-primary"></i>
                    Mon Calendrier de Rendez-vous
                </h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <a href="{{ path('app_appointment_new') }}" class="btn btn-primary">
                        <i class="fas fa-plus-circle"></i> Ajouter un rendez-vous / indisponibilité
                    </a>
                </div>
            </div>

            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label == 'error' ? 'danger' : label }} alert-dismissible fade show" role="alert">
                        <i class="fas fa-{{ label == 'success' ? 'check-circle' : 'exclamation-triangle' }}"></i>
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endfor %}

            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <div id="calendar"></div>
                </div>
            </div>
        </main>
    </div>
</div>

<div class="modal fade" id="appointmentDetailModal" tabindex="-1" aria-labelledby="appointmentDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="appointmentDetailModalLabel">Détails du Rendez-vous</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h4 id="modalTitle" class="mb-3"></h4>
                <p><strong><i class="fas fa-calendar-day me-2"></i>Date :</strong> <span id="modalDate"></span></p>
                <p><strong><i class="fas fa-clock me-2"></i>Heure :</strong> <span id="modalTime"></span></p>
                
                {# Affichage du statut #}
                <p id="modalStatus"><strong><i class="fas fa-info-circle me-2"></i>Statut :</strong> <span id="modalStatusBadge"></span></p>
                
                <p id="modalClient" style="display: none;"><strong><i class="fas fa-user me-2"></i>Client :</strong> <span id="modalClientName"></span></p>
                <p id="modalServices" style="display: none;"><strong><i class="fas fa-briefcase me-2"></i>Prestations :</strong> <span id="modalServicesList"></span></p>
                <p id="modalDescription" style="display: none;"><strong><i class="fas fa-info-circle me-2"></i>Description :</strong> <span id="modalDescriptionText"></span></p>
                <p id="modalUnavailabilityLabel" class="text-danger" style="display: none;"><i class="fas fa-ban me-2"></i>Ceci est une indisponibilité personnelle.</p>
                
                {# Boutons de changement de statut #}
                <div id="modalStatusButtons" class="d-flex flex-wrap gap-2 mt-3" style="display: none;">
                    <button type="button" id="confirmButton" class="btn btn-sm btn-success" style="display: none;">
                        <i class="fas fa-check-circle me-1"></i> Confirmer
                    </button>
                    <button type="button" id="cancelButton" class="btn btn-sm btn-secondary" style="display: none;">
                        <i class="fas fa-times-circle me-1"></i> Annuler
                    </button>
                    <button type="button" id="pendingButton" class="btn btn-sm btn-warning" style="display: none;">
                        <i class="fas fa-hourglass-half me-1"></i> En attente
                    </button>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                <a href="#" id="editAppointmentButton" class="btn btn-primary"><i class="fas fa-edit me-2"></i>Modifier</a>
                <button type="button" id="deleteAppointmentButton" class="btn btn-danger"><i class="fas fa-trash-alt me-2"></i>Supprimer</button>
                {# Le formulaire reste en place pour récupérer l'action et le token, mais il ne sera plus soumis directement #}
                <form id="deleteAppointmentForm" method="post" style="display: none;">
                    <input type="hidden" name="_method" value="DELETE">
                    <input type="hidden" name="_token" id="deleteAppointmentToken">
                    <input type="hidden" name="redirect_to_calendar" value="true">
                </form>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {# FullCalendar JS #}
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var calendarEl = document.getElementById('calendar');
            var events = {{ events|raw }}; // Events passed from controller
            var businessHours = {{ businessHours|raw }}; // Business hours passed from controller
            var updateTimesCsrfToken = "{{ updateTimesCsrfToken }}"; // Generic token for AJAX updates
            var minTime = "{{ minTime }}"; // Dynamic min time
            var maxTime = "{{ maxTime }}"; // Dynamic max time
            var initialDate = "{{ initialDate }}"; // Dynamic initial date
            var hiddenDays = {{ hiddenDays|raw }}; // Récupérer les jours à cacher - RÉACTIVÉ

            // Debugging: Log the values received from the controller
            console.log('minTime from controller:', minTime);
            console.log('maxTime from controller:', maxTime);
            console.log('businessHours from controller:', businessHours);
            console.log('initialDate from controller:', initialDate);
            console.log('hiddenDays from controller:', hiddenDays); // Log hiddenDays - RÉACTIVÉ

            // --- Logique pour la vue responsive du calendrier ---
            // Fonction pour déterminer la vue initiale et la configuration de la barre d'outils
            function getCalendarConfig() {
                if (window.innerWidth < 690) {
                    return {
                        initialView: 'timeGridDay', // Passe en vue journalière
                        headerToolbar: {
                            left: 'prev,next', // Conserve seulement les flèches de navigation
                            center: 'title',
                            right: '' // Supprime les boutons de vue
                        }
                    };
                } else {
                    return {
                        initialView: 'timeGridWeek', // Vue par défaut pour les grands écrans
                        headerToolbar: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'dayGridMonth,timeGridWeek,timeGridDay'
                        }
                    };
                }
            }

            // Obtenez la configuration initiale en fonction de la taille de l'écran
            const calendarConfig = getCalendarConfig();
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: calendarConfig.initialView, // Utilise la vue déterminée
                initialDate: initialDate, // Set the initial date dynamically
                locale: 'fr', // French locale
                firstDay: 1, // Set Monday as the first day of the week (1 for Monday, 0 for Sunday)
                headerToolbar: calendarConfig.headerToolbar, // Utilise la barre d'outils déterminée
                buttonText: {
                    today: 'Aujourd\'hui',
                    month: 'Mois',
                    week: 'Semaine',
                    day: 'Jour'
                },
                slotMinTime: minTime, // Use dynamic min time
                slotMaxTime: maxTime, // Use dynamic max time
                slotDuration: '00:30:00', // Changed from 00:15:00 to 00:30:00
                snapDuration: '00:30:00', // Changed from 00:15:00 to 00:30:00 for consistency
                allDaySlot: false, // Hide the all-day slot
                nowIndicator: true, // Show current time indicator
                editable: true, // Allow dragging and resizing events
                selectable: true, // Allow selecting time slots
                selectMirror: true, // Show a mirror event when selecting
                events: events, // Load events
                businessHours: businessHours, // Réactivé cette ligne
                selectConstraint: 'businessHours', // Réactivé cette ligne pour empêcher la sélection en dehors des heures ouvrables
                eventConstraint: 'businessHours', // Réactivé cette ligne pour empêcher le déplacement/redimensionnement en dehors des heures ouvrables
                height: 'auto', // Set height to auto to prevent large empty space
                hiddenDays: hiddenDays, // RÉACTIVÉ CETTE LIGNE

                // Handle date/time selection to create a new appointment
                select: function(info) {
                    // Redirect to new appointment form with pre-filled dates
                    window.location.href = '{{ path('app_appointment_new_prefilled') }}' + '/' + info.startStr + '/' + info.endStr;
                },

                // Handle clicking on an existing event
                eventClick: function(info) {
                    var appointment = info.event;
                    var extendedProps = appointment.extendedProps;

                    document.getElementById('modalTitle').textContent = appointment.title;
                    document.getElementById('modalDate').textContent = appointment.start.toLocaleDateString('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
                    document.getElementById('modalTime').textContent = appointment.start.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }) + ' - ' + appointment.end.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
                    // --- Étape 1 : Cacher tous les éléments conditionnels par défaut à chaque clic ---
                    document.getElementById('modalClient').style.display = 'none';
                    document.getElementById('modalServices').style.display = 'none';
                    document.getElementById('modalDescription').style.display = 'none';
                    document.getElementById('modalUnavailabilityLabel').style.display = 'none';
                    document.getElementById('modalStatus').style.display = 'none'; // Cacher la ligne entière du statut par défaut
                    document.getElementById('modalStatusButtons').style.display = 'none'; // Cacher les boutons par défaut
                    document.getElementById('confirmButton').style.display = 'none'; // S'assurer que les boutons individuels sont cachés
                    document.getElementById('cancelButton').style.display = 'none';
                    document.getElementById('pendingButton').style.display = 'none';
                    // --------------------------------------------------------------------------------

                    if (extendedProps.isPersonalUnavailability) {
                        // C'est une indisponibilité personnelle
                        document.getElementById('modalUnavailabilityLabel').style.display = 'block'; // Afficher le label "Ceci est une indisponibilité"
                        document.getElementById('modalStatus').style.display = 'block'; // Afficher la ligne du statut
                        document.getElementById('modalStatusBadge').innerHTML = '<span class="badge bg-info"><i class="fas fa-ban"></i> Indisponibilité Personnelle</span>'; // Les boutons de statut (modalStatusButtons, confirmButton, etc.) restent cachés grâce à la réinitialisation et ne sont pas affichés ici.
                    } else {
                        // C'est un rendez-vous classique
                        document.getElementById('modalClient').style.display = 'block';
                        document.getElementById('modalServices').style.display = 'block';
                        document.getElementById('modalStatus').style.display = 'block'; // Afficher la ligne du statut
                        document.getElementById('modalStatusButtons').style.display = 'flex'; // Afficher le conteneur des boutons de statut

                        document.getElementById('modalClientName').textContent = extendedProps.clientName || 'N/A';
                        document.getElementById('modalServicesList').textContent = extendedProps.services.map(s => s.name).join(', ') || 'Aucune';
                        
                        // Affichage du statut selon la valeur
                        updateStatusDisplay(extendedProps.status);
                        // Affichage des boutons de changement de statut basé sur le statut réel du RDV
                        updateStatusButtons(extendedProps.status, appointment.id);
                        // Afficher la description si elle existe
                        if (extendedProps.description) {
                            document.getElementById('modalDescription').style.display = 'block';
                            document.getElementById('modalDescriptionText').textContent = extendedProps.description;
                        }
                    }

                    // Set edit button link (valable pour les deux types d'événements)
                    document.getElementById('editAppointmentButton').href = '{{ path('app_appointment_edit', {'id': 'PLACEHOLDER_ID'}) }}'.replace('PLACEHOLDER_ID', appointment.id);
                    // Set delete button form action and token (valable pour les deux types d'événements)
                    document.getElementById('deleteAppointmentForm').action = '{{ path('app_appointment_delete', {'id': 'PLACEHOLDER_ID'}) }}'.replace('PLACEHOLDER_ID', appointment.id);
                    document.getElementById('deleteAppointmentToken').value = extendedProps.deleteToken; 

                    // Show the modal
                    var appointmentDetailModal = new bootstrap.Modal(document.getElementById('appointmentDetailModal'));
                    appointmentDetailModal.show();
                },

                // Handle event drop (drag and drop)
                eventDrop: function(info) {
                    if (!confirm("Êtes-vous sûr de vouloir déplacer ce rendez-vous ?")) {
                        info.revert(); // Revert if user cancels
                    } else {
                        updateAppointmentTimes(info.event.id, info.event.start, info.event.end, info); // Pass info to revert on error
                    }
                },

                // Handle event resize
                eventResize: function(info) {
                    if (!confirm("Êtes-vous sûr de vouloir redimensionner ce rendez-vous ?")) {
                        info.revert(); // Revert if user cancels
                    } else {
                        updateAppointmentTimes(info.event.id, info.event.start, info.event.end, info); // Pass info to revert on error
                    }
                }
            });
            calendar.render();

            // --- Gestion du redimensionnement de la fenêtre pour la vue responsive ---
            // Écoute l'événement de redimensionnement de la fenêtre
            window.addEventListener('resize', () => {
                const newConfig = getCalendarConfig(); // Récupère la nouvelle configuration basée sur la taille
                // Change la vue du calendrier si elle ne correspond pas à la configuration souhaitée
                if (calendar.view.type !== newConfig.initialView) {
                    calendar.changeView(newConfig.initialView);
                }
                // Les boutons de l'en-tête sont gérés par le CSS (@media query)
                // Il n'est pas nécessaire de manipuler headerToolbar ici via JS.
            });
            // Fonction pour mettre à jour l'affichage du statut
            function updateStatusDisplay(status) {
                let statusBadge = '';
                switch(status) {
                    case 'confirmed':
                        statusBadge = '<span class="badge bg-success"><i class="fas fa-check-circle"></i> Confirmé</span>';
                        break;
                    case 'cancelled':
                        statusBadge = '<span class="badge bg-secondary"><i class="fas fa-times-circle"></i> Annulé</span>';
                        break;
                    case 'pending':
                    default:
                        statusBadge = '<span class="badge bg-warning"><i class="fas fa-hourglass-half"></i> En attente</span>';
                        break;
                }
                document.getElementById('modalStatusBadge').innerHTML = statusBadge;
            }

            // Fonction pour mettre à jour les boutons de changement de statut
            function updateStatusButtons(currentStatus, appointmentId) {
                // Réinitialiser tous les boutons
                document.getElementById('confirmButton').style.display = 'none';
                document.getElementById('cancelButton').style.display = 'none';
                document.getElementById('pendingButton').style.display = 'none';

                // Afficher les boutons appropriés selon le statut actuel
                if (currentStatus !== 'confirmed') {
                    document.getElementById('confirmButton').style.display = 'inline-block';
                    document.getElementById('confirmButton').onclick = function() {
                        updateAppointmentStatus(appointmentId, 'confirmed');
                    };
                }

                if (currentStatus !== 'cancelled') {
                    document.getElementById('cancelButton').style.display = 'inline-block';
                    document.getElementById('cancelButton').onclick = function() {
                        updateAppointmentStatus(appointmentId, 'cancelled');
                    };
                }

                if (currentStatus !== 'pending' && currentStatus !== 'confirmed') {
                    document.getElementById('pendingButton').style.display = 'inline-block';
                    document.getElementById('pendingButton').onclick = function() {
                        updateAppointmentStatus(appointmentId, 'pending');
                    };
                }
            }

            // Fonction pour mettre à jour le statut d'un rendez-vous - CORRIGÉE
            function updateAppointmentStatus(appointmentId, newStatus) {
                // CORRECTION : Ne pas concaténer le token CSRF avec l'ID et le statut
                const csrfToken = '{{ csrf_token('update_status') }}';
                
                // Debug pour vérifier les valeurs
                console.log('appointmentId:', appointmentId);
                console.log('newStatus:', newStatus);
                console.log('csrfToken:', csrfToken);
                
                fetch('{{ path('app_appointment_update_status', {'id': 'PLACEHOLDER_ID', 'status': 'PLACEHOLDER_STATUS'}) }}'.replace('PLACEHOLDER_ID', appointmentId).replace('PLACEHOLDER_STATUS', newStatus), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    body: new URLSearchParams({
                        '_token': csrfToken
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.status === 'success') {
                        // Mise à jour réussie
                        updateStatusDisplay(newStatus);
                        updateStatusButtons(newStatus, appointmentId);
                        
                        // Mettre à jour l'événement dans le calendrier
                        const event = calendar.getEventById(appointmentId);
                        if (event) {
                            event.setExtendedProp('status', newStatus);
                        }
                        
                        // Afficher un message de succès
                        showAlert('success', 'Statut mis à jour avec succès !');
                    } else {
                        showAlert('danger', data.message || 'Erreur lors de la mise à jour du statut.');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showAlert('danger', 'Une erreur est survenue lors de la mise à jour du statut.');
                });
            }

            // Fonction pour afficher une alerte
            function showAlert(type, message) {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
                alertDiv.role = 'alert';
                alertDiv.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                const container = document.querySelector('main');
                const firstChild = container.firstElementChild;
                container.insertBefore(alertDiv, firstChild.nextSibling);
                // Supprimer l'alerte après 5 secondes
                setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }

            // Function to send updated appointment times to the server
            function updateAppointmentTimes(id, newStart, newEnd, info) { // Added info parameter
                fetch('/appointments/' + id + '/update-times', { // You'll need to create this route
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-TOKEN': updateTimesCsrfToken // Use the generic token
                    },
                    body: JSON.stringify({
                        start: newStart.toISOString(),
                        end: newEnd.toISOString()
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        // Optionally, show a success message
                        console.log('Rendez-vous mis à jour.');
                        // No need to revert here, the event is already updated on calendar
                    } else {
                        // Revert event if update failed
                        info.revert();
                        alert('Erreur lors de la mise à jour du rendez-vous : ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    info.revert();
                    alert('Une erreur inattendue est survenue lors de la mise à jour.');
                });
            }

            // Handle delete button click in modal
            document.getElementById('deleteAppointmentButton').addEventListener('click', function() {
                if (confirm("Êtes-vous sûr de vouloir supprimer ce rendez-vous ? Cette action est irréversible.")) {
                    // Get the form and its data
                    var form = document.getElementById('deleteAppointmentForm');
                    var appointmentId = form.action.split('/').pop(); // Extract ID from action URL
                    var csrfToken = document.getElementById('deleteAppointmentToken').value;

                    // Perform AJAX request instead of form submission
                    fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded', // Use this for form-like submission
                            'X-Requested-With': 'XMLHttpRequest', // Indicate an AJAX request
                        },
                        body: new URLSearchParams({
                            '_method': 'DELETE', // Symfony expects this for DELETE method via POST
                            '_token': csrfToken
                        })
                    })
                    .then(response => {
                        // Check if the response is JSON
                        const contentType = response.headers.get("content-type");
                        if (contentType && contentType.indexOf("application/json") !== -1) {
                            return response.json();
                        } else {
                            // If not JSON, assume a redirect or other non-JSON response
                            window.location.reload();
                            throw new Error("Non-JSON response received.");
                        }
                    })
                    .then(data => {
                        if (data.status === 'success') {
                            alert(data.message); // Show success message
                            var appointmentDetailModal = bootstrap.Modal.getInstance(document.getElementById('appointmentDetailModal'));
                            if (appointmentDetailModal) {
                                appointmentDetailModal.hide(); // Hide the modal
                            }
                            // Reload the page to refresh the calendar
                            window.location.reload();
                        } else {
                            alert('Erreur: ' + data.message); // Show error message
                        }
                    })
                    .catch(error => {
                        console.error('Erreur lors de la suppression du rendez-vous:', error);
                        alert('Une erreur est survenue lors de la suppression du rendez-vous.');
                        window.location.reload();
                    });
                }
            });
            // Recharger la page lorsque la modal est complètement cachée
            var appointmentDetailModalElement = document.getElementById('appointmentDetailModal');
            appointmentDetailModalElement.addEventListener('hidden.bs.modal', function () {
                window.location.reload();
            });
        });
    </script>
{% endblock %}