{# templates/appointment/edit.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Modifier Rendez-vous - RDV Pro{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row">
        <main class="col-12 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">
                    <i class="fas fa-calendar-check text-primary"></i>
                    Modifier le Rendez-vous / Indisponibilité
                </h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <a href="{{ path('app_appointment_index') }}" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Retour au calendrier
                    </a>
                </div>
            </div>

            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label == 'error' ? 'danger' : label }} alert-dismissible fade show" role="alert">
                        <i class="fas fa-{{ label == 'success' ? 'check-circle' : 'exclamation-triangle' }}"></i>
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endfor %}

            <div class="row">
                <div class="col-lg-8">
                    <div class="card shadow-sm">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-clipboard-list"></i>
                                Détails du rendez-vous
                            </h5>
                        </div>
                        <div class="card-body">
                            {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}
                                <div class="mb-3">
                                    {{ form_label(form.title) }}
                                    {{ form_widget(form.title) }}
                                    {{ form_errors(form.title) }}
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        {{ form_label(form.startTime) }}
                                        {{ form_widget(form.startTime) }}
                                        {{ form_errors(form.startTime) }}
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        {{ form_label(form.endTime) }}
                                        {{ form_widget(form.endTime) }}
                                        {{ form_errors(form.endTime) }}
                                    </div>
                                </div>

                                {# Section modifiée pour isPersonalUnavailability #}
                                <div class="mb-3 form-check form-check-inline">
                                    {{ form_widget(form.isPersonalUnavailability, {'attr': {'class': 'form-check-input me-2'}}) }}
                                    <label class="form-check-label" for="appointment_isPersonalUnavailability">
                                        {{ form.isPersonalUnavailability.vars.label }}
                                    </label>
                                    <small class="form-text text-muted d-block ms-4">
                                        {{ form.isPersonalUnavailability.vars.help }}
                                    </small>
                                    {{ form_errors(form.isPersonalUnavailability) }}
                                </div>

                                <div id="clientAndServicesFields">
                                    <div class="mb-3">
                                        {{ form_label(form.client) }}
                                        <div class="input-group">
                                            {{ form_widget(form.client) }}
                                            <button type="button" class="btn btn-outline-primary" id="createClientButton" data-bs-toggle="modal" data-bs-target="#newClientModal">
                                                <i class="fas fa-plus"></i> Créer un client
                                            </button>
                                        </div>
                                        {{ form_errors(form.client) }}
                                    </div>
                                    <div class="mb-3">
                                        {{ form_label(form.services) }}
                                        {{ form_widget(form.services) }}
                                        {{ form_errors(form.services) }}
                                    </div>
                                </div>

                                {# Moved description field here #}
                                <div class="mb-3">
                                    {{ form_label(form.description) }}
                                    {{ form_widget(form.description, {'attr': {'rows': 2}}) }} {# Reduced height #}
                                    {{ form_errors(form.description) }}
                                </div>

                                <div class="mb-3">
                                    
                                    {{ form_label(form.descriptionPrive) }}
                                    {{ form_widget(form.descriptionPrive, {'attr': {'rows': 2}}) }} {# Reduced height #}
                                    {{ form_errors(form.descriptionPrive) }}
                                </div>

                                <hr class="my-4">
                                
                                <div class="d-flex justify-content-between">
                                    <a href="{{ path('app_appointment_index') }}" class="btn btn-secondary">
                                        <i class="fas fa-times"></i> Annuler
                                    </a>
                                    <button type="submit" class="btn btn-primary btn-lg">
                                        <i class="fas fa-save"></i> Enregistrer les modifications
                                    </button>
                                </div>
                            {{ form_end(form) }}
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card border-info">
                        <div class="card-header bg-info text-white">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-lightbulb"></i> Aide
                            </h6>
                        </div>
                        <div class="card-body">
                            <h6>Types de créneaux :</h6>
                            <ul class="small text-muted">
                                <li>**Rendez-vous client :** Nécessite un client et au moins une prestation.</li>
                                <li>**Indisponibilité personnelle :** Pour bloquer votre calendrier (ex: pause déjeuner, formation). Ne nécessite ni client ni prestation.</li>
                            </ul>
                            <hr>
                            <h6>Durée :</h6>
                            <ul class="small text-muted">
                                <li>La durée du rendez-vous doit être suffisante pour toutes les prestations sélectionnées.</li>
                                <li>Les rendez-vous doivent respecter vos horaires d'ouverture.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<div class="modal fade" id="newClientModal" tabindex="-1" aria-labelledby="newClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="newClientModalLabel">Créer un nouveau client</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newClientForm">
                    <div class="mb-3">
                        <label for="newClientNom" class="form-label">Nom <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="newClientNom" name="nom" required>
                    </div>
                    <div class="mb-3">
                        <label for="newClientPrenom" class="form-label">Prénom <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="newClientPrenom" name="prenom" required>
                    </div>
                    <div class="mb-3">
                        <label for="newClientEmail" class="form-label">Email <span class="text-danger">*</span></label>
                        <input type="email" class="form-control" id="newClientEmail" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="newClientTelephone" class="form-label">Téléphone</label>
                        <input type="tel" class="form-control" id="newClientTelephone" name="telephone">
                    </div>
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Annuler</button>
                        <button type="submit" class="btn btn-primary">Créer le client</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const isPersonalUnavailabilityCheckbox = document.getElementById('appointment_isPersonalUnavailability');
    const clientAndServicesFields = document.getElementById('clientAndServicesFields');
    const clientInput = document.getElementById('appointment_client');
    const servicesSelect = document.getElementById('appointment_services'); // Renamed for clarity
    const startTimeInput = document.getElementById('appointment_startTime');
    const endTimeInput = document.getElementById('appointment_endTime');
    const titleInput = document.getElementById('appointment_title'); // Get title input

    // Pass professional's first name and business name from Twig to JavaScript
    const professionalFirstName = "{{ app.user.firstName | e('js') }}";
    const professionalBusinessName = "{{ app.user.businessName | e('js') }}";

    // Define texts to be used as actual values and placeholders
    const defaultTitleText = `RDV posé par '${professionalBusinessName}'`;
    const unavailabilityTitleText = `Indisponibilité posée par '${professionalFirstName}'`;

    // Parse services data passed from the controller
    const servicesData = {{ servicesData|raw }};
    const serviceDurations = {};
    servicesData.forEach(service => {
        serviceDurations[service.id] = service.duration;
    });

    // MODIFICATION ICI : Mettez à jour la fonction updateTitlePlaceholder
    function updateTitlePlaceholder() {
        if (!titleInput) return; // Ensure titleInput exists before manipulating

        const isUnavailability = isPersonalUnavailabilityCheckbox && isPersonalUnavailabilityCheckbox.checked;
        const targetText = isUnavailability ? unavailabilityTitleText : defaultTitleText;

        // Si le champ est vide, ou s'il contient l'autre texte par défaut
        // (ce qui signifie que le type a changé et que l'utilisateur n'a pas tapé de texte personnalisé)
        if (titleInput.value === '' || 
            (isUnavailability && titleInput.value === defaultTitleText) ||
            (!isUnavailability && titleInput.value === unavailabilityTitleText)) 
        {
            titleInput.value = targetText; // Définit la VRAIE valeur du champ
        }
        
        // Mettre à jour le placeholder pour toujours refléter l'état actuel (même si la valeur est déjà présente)
        titleInput.placeholder = targetText; 
        
    }

    function toggleClientAndServicesFields() {
        if (isPersonalUnavailabilityCheckbox && isPersonalUnavailabilityCheckbox.checked) {
            if (clientAndServicesFields) clientAndServicesFields.style.display = 'none';
            if (clientInput) clientInput.removeAttribute('required');
            if (servicesSelect) servicesSelect.removeAttribute('required');
            // Clear values when hiding
            if (clientInput) clientInput.value = '';
            if (servicesSelect) Array.from(servicesSelect.options).forEach(option => option.selected = false);
            updateEndTime(); // Recalculate end time as services are cleared
        } else {
            if (clientAndServicesFields) clientAndServicesFields.style.display = 'block';
            if (clientInput) clientInput.setAttribute('required', 'required');
            if (servicesSelect) servicesSelect.setAttribute('required', 'required');
        }
        updateTitlePlaceholder(); // Update title value and placeholder based on checkbox state
    }

    function updateEndTime() {
        const startTimeStr = startTimeInput ? startTimeInput.value : '';
        if (!startTimeStr) {
            if (endTimeInput) endTimeInput.value = '';
            return;
        }

        const startTime = new Date(startTimeStr); // Parse start time

        let durationToAdd = 0;
        if (isPersonalUnavailabilityCheckbox && !isPersonalUnavailabilityCheckbox.checked) {
            // If it's a client appointment
            if (servicesSelect) {
                Array.from(servicesSelect.selectedOptions).forEach(option => {
                    const serviceId = option.value;
                    if (serviceDurations[serviceId]) {
                        durationToAdd += serviceDurations[serviceId];
                    }
                });
            }
            // If no services selected, default to 30 minutes for client appointment
            if (durationToAdd === 0) {
                durationToAdd = 30;
            }
        } else {
            // For personal unavailability, default to 30 minutes
            durationToAdd = 30;
        }

        // Create a new Date object based on startTime to avoid modifying it directly
        const endTime = new Date(startTime);
        endTime.setMinutes(startTime.getMinutes() + durationToAdd); // Add duration

        // Format endTime back to 'YYYY-MM-DDTHH:MM' for the input field
        const year = endTime.getFullYear();
        const month = String(endTime.getMonth() + 1).padStart(2, '0');
        const day = String(endTime.getDate()).padStart(2, '0');
        const hours = String(endTime.getHours()).padStart(2, '0');
        const minutes = String(endTime.getMinutes()).padStart(2, '0');
        const formattedEndTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        
        if (endTimeInput) endTimeInput.value = formattedEndTime;
    }

    // Initial state on page load
    toggleClientAndServicesFields();
    updateEndTime(); // Set initial end time based on pre-filled values or defaults

    // Listen for changes on the checkbox
    if (isPersonalUnavailabilityCheckbox) {
        isPersonalUnavailabilityCheckbox.addEventListener('change', toggleClientAndServicesFields);
    }
    // Listen for changes on start time and services select
    if (startTimeInput) {
        startTimeInput.addEventListener('change', updateEndTime);
    }
    if (servicesSelect) {
        servicesSelect.addEventListener('change', updateEndTime);
    }


    // --- New Client Modal Logic ---
    const newClientModalElement = document.getElementById('newClientModal');
    const newClientForm = document.getElementById('newClientForm');
    const clientSelectElement = document.getElementById('appointment_client'); // The main client select

    if (newClientForm) { // Ensure the form exists before adding listener
        newClientForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(newClientForm);
            const data = {};
            for (let [key, value] of formData.entries()) {
                data[key] = value;
            }

            // Clear previous error messages
            const errorDiv = newClientForm.querySelector('.alert-danger');
            if (errorDiv) {
                errorDiv.remove();
            }

            fetch('/client/create-ajax', { // This route will be created in ClientController
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    // You might need a CSRF token here if your Symfony setup requires it for AJAX POSTs
                    // 'X-CSRF-TOKEN': '{{ csrf_token('create_client_ajax') }}' // Example if needed
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.status === 'success') {
                    // Add new client to the select dropdown
                    if (clientSelectElement) {
                        const newOption = document.createElement('option');
                        newOption.value = result.clientId;
                        newOption.textContent = result.clientName;
                        clientSelectElement.appendChild(newOption);

                        // Select the newly added client
                        clientSelectElement.value = result.clientId;
                    }

                    // Close the modal
                    if (newClientModalElement) {
                        const modalInstance = bootstrap.Modal.getInstance(newClientModalElement);
                        if (modalInstance) {
                            modalInstance.hide();
                        }
                    }

                    // Clear the modal form for next use
                    newClientForm.reset();

                    // Optionally, show a success message (using Bootstrap alert for consistency)
                    const successAlert = `
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i> Client "${result.clientName}" créé et sélectionné !
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
                    document.querySelector('main.px-md-4').insertAdjacentHTML('afterbegin', successAlert);
                    setTimeout(() => {
                        const alert = document.querySelector('.alert.alert-success');
                        if (alert) {
                            bootstrap.Alert.getInstance(alert)?.close();
                        }
                    }, 5000); // Auto-close after 5 seconds

                } else {
                    // Display error messages in the modal
                    const errorAlert = `
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i> Erreur lors de la création du client: ${result.message}
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    `;
                    newClientForm.prepend(errorAlert); // Add error message at the top of the form
                }
            })
            .catch(error => {
                console.error('Erreur Fetch:', error);
                const errorAlert = `
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i> Une erreur réseau est survenue.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                newClientForm.prepend(errorAlert);
            });
        });
    }
});
</script>
{% endblock %}